{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EJ\\\\Project-4\\\\src\\\\components\\\\QuizScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { db } from \"../firebase\";\nimport { collection, query, where, orderBy, getDocs } from \"firebase/firestore\";\nimport \"../styles/QuizScreen.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuizScreen = ({\n  level\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userAnswer, setUserAnswer] = useState(\"\");\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const q = query(collection(db, \"questions\"), where(\"level\", \"==\", level),\n        // 난이도별 데이터 필터링\n        orderBy(\"id\", \"asc\") // id 순으로 정렬\n        );\n        const querySnapshot = await getDocs(q);\n        const fetchedQuestions = querySnapshot.docs.map(doc => doc.data());\n        if (fetchedQuestions.length === 0) {\n          setError(`\"${level}\" 레벨에 대한 문제가 없습니다.`);\n        } else {\n          setQuestions(fetchedQuestions);\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error fetching questions: \", err);\n        setError(\"데이터를 가져오는 중 오류가 발생했습니다.\");\n        setLoading(false);\n      }\n    };\n    fetchQuestions();\n  }, [level]);\n  const handleInputChange = e => setUserAnswer(e.target.value);\n  const handleSubmit = () => {\n    const currentQuestion = questions[currentQuestionIndex];\n    if (userAnswer.trim().toLowerCase() === currentQuestion.answer.toLowerCase()) {\n      alert(\"정답입니다!\");\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n    } else {\n      alert(\"틀렸습니다! 다시 시도해보세요.\");\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading questions...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 21\n  }, this);\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [level.toUpperCase(), \" \\uB808\\uBCA8 \\uD034\\uC988\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userAnswer,\n        onChange: handleInputChange,\n        placeholder: \"\\uC815\\uB2F5\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"\\uC81C\\uCD9C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizScreen, \"rjd7W+A6NzGM/xPSlkmGR7ehsHA=\");\n_c = QuizScreen;\nexport default QuizScreen;\nvar _c;\n$RefreshReg$(_c, \"QuizScreen\");","map":{"version":3,"names":["React","useState","useEffect","db","collection","query","where","orderBy","getDocs","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizScreen","level","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","userAnswer","setUserAnswer","timeElapsed","setTimeElapsed","loading","setLoading","error","setError","fetchQuestions","q","querySnapshot","fetchedQuestions","docs","map","doc","data","length","err","console","handleInputChange","e","target","value","handleSubmit","currentQuestion","trim","toLowerCase","answer","alert","prevIndex","children","fileName","_jsxFileName","lineNumber","columnNumber","className","toUpperCase","question","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/EJ/Project-4/src/components/QuizScreen.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { db } from \"../firebase\";\r\nimport { collection, query, where, orderBy, getDocs } from \"firebase/firestore\";\r\nimport \"../styles/QuizScreen.css\";\r\n\r\nconst QuizScreen = ({ level }) => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [userAnswer, setUserAnswer] = useState(\"\");\r\n  const [timeElapsed, setTimeElapsed] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const q = query(\r\n          collection(db, \"questions\"),\r\n          where(\"level\", \"==\", level), // 난이도별 데이터 필터링\r\n          orderBy(\"id\", \"asc\") // id 순으로 정렬\r\n        );\r\n        const querySnapshot = await getDocs(q);\r\n        const fetchedQuestions = querySnapshot.docs.map((doc) => doc.data());\r\n\r\n        if (fetchedQuestions.length === 0) {\r\n          setError(`\"${level}\" 레벨에 대한 문제가 없습니다.`);\r\n        } else {\r\n          setQuestions(fetchedQuestions);\r\n        }\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error(\"Error fetching questions: \", err);\r\n        setError(\"데이터를 가져오는 중 오류가 발생했습니다.\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, [level]);\r\n\r\n  const handleInputChange = (e) => setUserAnswer(e.target.value);\r\n\r\n  const handleSubmit = () => {\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n    if (\r\n      userAnswer.trim().toLowerCase() === currentQuestion.answer.toLowerCase()\r\n    ) {\r\n      alert(\"정답입니다!\");\r\n      setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\r\n    } else {\r\n      alert(\"틀렸습니다! 다시 시도해보세요.\");\r\n    }\r\n  };\r\n\r\n  if (loading) return <p>Loading questions...</p>;\r\n  if (error) return <p>{error}</p>;\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-screen\">\r\n      <h1>{level.toUpperCase()} 레벨 퀴즈</h1>\r\n      {currentQuestion && (\r\n        <>\r\n          <p>{currentQuestion.question}</p>\r\n          <input\r\n            type=\"text\"\r\n            value={userAnswer}\r\n            onChange={handleInputChange}\r\n            placeholder=\"정답을 입력하세요\"\r\n          />\r\n          <button onClick={handleSubmit}>제출</button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizScreen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}